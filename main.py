import os
import sys
import shutil
import logging
from datetime import datetime


# –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
if hasattr(sys, '_MEIPASS'):
    base_path = sys._MEIPASS
    print(f"Base path: {base_path}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    possible_paths = [
            os.path.join(base_path, 'tk', 'tk8.6'),
            os.path.join(base_path, 'tcl', 'tk8.6'),
            os.path.join(base_path, 'tk8.6'),
    ]

    for path in possible_paths:
        exists = os.path.exists(path)
        print(f"Path: {path} - exists: {exists}")
        if exists:
            files = os.listdir(path)
            print(f"  Files: {len(files)}")
            if 'tk.tcl' in files:
                print("  ‚úÖ tk.tcl FOUND!")

    # –ï—Å–ª–∏ tk8.6 –≤ –∫–æ—Ä–Ω–µ –∫–∞–∫ tk/tk8.6, –ø–µ—Ä–µ–º–µ—â–∞–µ–º
    tk_root_path = os.path.join(base_path, 'tk', 'tk8.6')
    tk_correct_path = os.path.join(base_path, 'tcl', 'tk8.6')

    if os.path.exists(tk_root_path):
        print(f"Found tk8.6 at: {tk_root_path}")
        if not os.path.exists(tk_correct_path):
            os.makedirs(os.path.dirname(tk_correct_path), exist_ok=True)
            shutil.copytree(tk_root_path, tk_correct_path)
            print(f"‚úÖ Copied tk8.6 to: {tk_correct_path}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏
    os.environ['TCL_LIBRARY'] = os.path.join(base_path, 'tcl', 'tcl8.6')
    os.environ['TK_LIBRARY'] = os.path.join(base_path, 'tcl', 'tk8.6')

    # print(f"Final TCL_LIBRARY: {os.environ['TCL_LIBRARY']} - exists: {os.path.exists(os.environ['TCL_LIBRARY'])}")
    # print(f"Final TK_LIBRARY: {os.environ['TK_LIBRARY']} - exists: {os.path.exists(os.environ['TK_LIBRARY'])}")

import tkinter as tk

# with open('debug_log.txt', 'a') as f:
#     f.write("Tkinter imported successfully\n")

# import tkinter as tk
import openpyxl
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
# –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ç–µ–º—ã
from tkinter import ttk, filedialog, messagebox

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –ò –≤ –∫–æ–Ω—Å–æ–ª—å
log_filename = f"cable_signs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"


class ColoredFormatter(logging.Formatter):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏"""
    COLORS = {
            'INFO': '\033[94m',  # –°–∏–Ω–∏–π
            'WARNING': '\033[93m',  # –ñ–µ–ª—Ç—ã–π
            'ERROR': '\033[91m',  # –ö—Ä–∞—Å–Ω—ã–π
            'CRITICAL': '\033[91m',  # –ö—Ä–∞—Å–Ω—ã–π
            'RESET': '\033[0m'  # –°–±—Ä–æ—Å
    }

    def format(self, record):
        log_message = super().format(record)
        if record.levelname in self.COLORS:
            return f"{self.COLORS[record.levelname]}{log_message}{self.COLORS['RESET']}"
        return log_message


# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
colored_formatter = ColoredFormatter('%(levelname)s: %(message)s')

# –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler('app.log', encoding='utf-8')
file_handler.setFormatter(file_formatter)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(colored_formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
logging.info("=== Cable Signs Application Started ===")
logging.info(f"Working directory: {os.getcwd()}")

# –¢–µ–ø–µ—Ä—å –≤—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –∏ –≤ —Ñ–∞–π–ª, –∏ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.info("This message goes to both file and console")
logging.warning("This warning is visible in console")
logging.error("Errors also appear in console")

# –£–∫–∞–∑—ã–≤–∞–µ–º Python, –≥–¥–µ –∏—Å–∫–∞—Ç—å Tcl/Tk –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
base_prefix = getattr(sys, 'base_prefix', sys.prefix)  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –æ–∫—Ä—É–∂–µ–Ω–∏—é
tcl_dir = os.path.join(base_prefix, 'tcl')

# –í–∞–∂–Ω–æ: –∑–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ Tk
os.environ["TCL_LIBRARY"] = os.path.join(tcl_dir, "tcl8.6")
os.environ["TK_LIBRARY"] = os.path.join(tcl_dir, "tk8.6")

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –®–†–ò–§–¢–ê ===
# –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å Times New Roman Bold –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
try:
    pdfmetrics.registerFont(TTFont('Times-Bold', 'timesbd.ttf'))
except:
    pass  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
TRIANGLE_BASE = 60 * mm        # –®–∏—Ä–∏–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è ‚Äî 60 –º–º (–ø–æ –ì–û–°–¢)
TRIANGLE_HEIGHT = 55 * mm      # –í—ã—Å–æ—Ç–∞ ‚Äî 55 –º–º (–ø–æ –ì–û–°–¢)
PAGE_WIDTH, PAGE_HEIGHT = A4  # –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ A4

MAX_COLS = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ —Ä—è–¥—É
MAX_ROWS = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤

FONT_SYSTEM = 24  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è system
FONT_TRACK = 14  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è track
FONT_CABLE = 16  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è cable (—á—É—Ç—å –±–æ–ª—å—à–µ)
FONT_LENGTH = 14  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è length

MIN_FONT_SIZE = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏
PRINTER_OFFSET_X = 0.0 * mm  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ –æ—Å–∏ X
PRINTER_OFFSET_Y = 0.0 * mm  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ –æ—Å–∏ Y
# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ Windows
INVALID_FILENAME_CHARS = r'<>:"/\\|?*'


# === –§–£–ù–ö–¶–ò–Ø: –†–ê–ó–î–ï–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê CABLE –ù–ê 2 –°–¢–†–û–ö–ò ===
def split_cable_text(text):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ 'cable' –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏:
    - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    - –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ ‚Äî –¥–µ–ª–∏—Ç –ø–æ–ø–æ–ª–∞–º.
    –ü—Ä–∏–º–µ—Ä: "ParLan 4x2x0,57" ‚Üí ["ParLan", "4x2x0,57"]
    """
    if not text or not text.strip():
        return ["", ""]
    words = text.strip().split()
    if len(words) == 0:
        return ["", ""]
    elif len(words) == 1:
        w = words[0]
        mid = len(w) // 2
        return [w[:mid], w[mid:]]
    else:
        return [words[0], " ".join(words[1:])]


def find_column(headers, *names):
    """
    –ò—â–µ—Ç –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø–æ —Å–ø–∏—Å–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º—ë–Ω.
    :param headers: —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Excel
    :param names: –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
    :return: –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ None
    """
    lower_headers = [h.lower() if h else "" for h in headers]

    for name in names:
        if name.lower() in lower_headers:
            return lower_headers.index(name.lower())

    return None


# === –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
class CableLabelApp:
    def __init__(self, root):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        :param root: –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
        """
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–≤ –º–º)
        self.printer_offset_x = tk.StringVar(value="0.0")
        self.printer_offset_y = tk.StringVar(value="0.0")
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ float-–∑–Ω–∞—á–µ–Ω–∏—è
        self._offset_x = 0.0
        self._offset_y = 0.0
        self.root = root
        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã ---
        self.root.tk_setPalette(
                background='#2e2e2e', foreground='white',
                activeBackground='#4a4a4a', activeForeground='white'
        )
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã –∫–æ–Ω—Ç—É—Ä–∞
        self.line_width_var = tk.StringVar(value="5.0")
        self._line_width = 5.0  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–º

        # üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.line_width_var.trace_add('write', self.update_offsets)

        style = ttk.Style()
        style.theme_use('clam')  # –∏–ª–∏ 'alt'

        style.configure('.', background='#2e2e2e', foreground='white', fieldbackground='#3c3c3c')
        style.configure('TLabel', foreground='white', background='#2e2e2e')
        style.configure('TButton', background='#007acc', foreground='white', padding=5)
        style.map('TButton', background=[('active', '#005a99')])
        style.configure('TEntry', fieldbackground='#3c3c3c', foreground='white', insertcolor='white')
        style.configure('TProgressbar', background='#007acc', troughcolor='#1e1e1e')

        # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏ ‚Äî —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        self.help_color = "#ccccff"
        self.root.title('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏—Ä–æ–∫')
        self.root.geometry("580x630")

        self.input_file = tk.StringVar()  # –ü—É—Ç—å –∫ Excel
        self.output_dir = tk.StringVar()  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        self.create_widgets()

    def sanitize_filename(self, name):
        """–ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ _"""
        for char in INVALID_FILENAME_CHARS:
            name = name.replace(char, '_')
            logger.info(f"üßπ –ó–∞–º–µ–Ω–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {char} –Ω–∞ {name}")
        return name.strip()

    def reset_filename(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.output_name.set("cable_labels.pdf")

    def create_widgets(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        frame = ttk.Frame(self.root, padding=20)
        frame.pack(fill="both", expand=True)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validate_cmd = (self.root.register(self.validate_float_input), '%P')

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(frame, text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏—Ä–æ–∫ –ø–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É —Ç—Ä–∞—Å—Å –∫–∞–±–µ–ª—è", font=("Arial", 14, "bold")).grid(
                row=0, column=0, columnspan=3, pady=(0, 15)
        )

        # Excel —Ñ–∞–π–ª
        ttk.Label(frame, text="Excel —Ñ–∞–π–ª:").grid(row=1, column=0, sticky="w", pady=5)
        ttk.Entry(frame, textvariable=self.input_file, width=40).grid(row=1, column=1, padx=5, pady=5)
        ttk.Button(frame, text="–û–±–∑–æ—Ä", command=self.browse_input).grid(row=1, column=2, padx=5)

        # –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        ttk.Label(frame, text="–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:").grid(row=2, column=0, sticky="w", pady=5)
        ttk.Entry(frame, textvariable=self.output_dir, width=40).grid(row=2, column=1, padx=5, pady=5)
        ttk.Button(frame, text="–û–±–∑–æ—Ä", command=self.browse_output).grid(row=2, column=2, padx=5)

        # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(frame, text="–ò–º—è PDF-—Ñ–∞–π–ª–∞:").grid(row=3, column=0, sticky="w", pady=5)
        self.output_name = tk.StringVar(value="cable_labels")  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # ttk.Button(frame, text="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", command=self.reset_filename).grid(row=3, column=3, padx=5)
        ttk.Entry(frame, textvariable=self.output_name, width=40).grid(row=3, column=1, padx=5, pady=5)
        ttk.Label(frame, text=".pdf", foreground="gray").grid(row=3, column=2, sticky="w", padx=(0, 5))

        # –°–ø—Ä–∞–≤–∫–∞
        help_text = (
                "1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª Excel —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n"
                "_______________________________________\n"
                "| –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ | –¢—Ä–∞—Å—Å–∞ | –ö–∞–±–µ–ª—å | –î–ª–∏–Ω–∞ | –ö–æ–ª-–≤–æ |\n"
                "¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø\n"
                "–ì–¥–µ '–ö–æ–ª-–≤–æ' ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ä–æ–∫ –Ω–∞ —Ç—Ä–∞—Å—Å—É.\n\n"
                "2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n\n"
                "2. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.\n\n"
                "3. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å PDF'."
        )
        help_label = ttk.Label(
                frame,
                text=help_text,
                font=("Arial", 9),
                foreground=self.help_color,
                relief="flat",
                anchor="center",
                justify="left",
                wraplength=460
        )
        help_label.grid(row=4, column=0, columnspan=3, pady=(15, 10), sticky="ew")

        # –¢–æ–ª—â–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞
        ttk.Label(frame, text="–¢–æ–ª—â–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞ (–º–º):").grid(row=5, column=0, sticky="w", pady=5)
        ttk.Entry(
                frame,
                textvariable=self.line_width_var,
                width=8,
                validate='key',
                validatecommand=(self.root.register(self.validate_float_input), '%P')
        ).grid(row=5, column=1, sticky="w", padx=(0, 10))

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        width_hint = ttk.Label(
                frame,
                text="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 1.8‚Äì6.0 –º–º",
                font=("Arial", 8),
                foreground="gray"
        )
        width_hint.grid(row=6, column=0, columnspan=4, sticky="w", pady=(0, 5))

        # --- –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ ---
        ttk.Label(frame, text="–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ø–æ –æ—Å–∏ X (–º–º):").grid(row=7, column=0, sticky="w", pady=(15, 5))
        ttk.Entry(
                frame,
                textvariable=self.printer_offset_x,
                width=8,
                validate='key',
                validatecommand=validate_cmd
        ).grid(row=7, column=1, sticky="w", padx=(0, 10))

        ttk.Label(frame, text="–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ –ø–æ –æ—Å–∏ Y (–º–º):").grid(row=8, column=0, sticky="w", pady=5)
        ttk.Entry(
                frame,
                textvariable=self.printer_offset_y,
                width=8,
                validate='key',
                validatecommand=validate_cmd
        ).grid(row=8, column=1, sticky="w", padx=(0, 10))

        # –ü–æ–¥–ø–∏—à–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        self.printer_offset_x.trace_add('write', self.update_offsets)
        self.printer_offset_y.trace_add('write', self.update_offsets)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        offset_hint = ttk.Label(
                frame,
                text="–°–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–ø–ª–µ—Ç –ø–æ –¥–ª–∏–Ω–Ω–æ–º—É –∫—Ä–∞—é ",
                font=("Arial", 8),
                foreground="gray"
        )
        offset_hint.grid(row=9, column=0, columnspan=4, sticky="w", pady=(0, 10))

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        ttk.Button(frame, text="–°–æ–∑–¥–∞—Ç—å PDF", command=self.generate).grid(row=10, column=0, columnspan=3, pady=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(frame, mode="determinate")
        self.progress.grid(row=11, column=0, columnspan=3, pady=10, sticky="ew")

        # –ü–æ–¥–ø–∏—Å—å –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤ –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        copyright_label = tk.Label(
                frame,
                text='@2025 –û–û–û "–î–ì–°" –£–ì–ü–† ‚Ññ2',
                font=("Arial", 7),
                fg="#468000",  # –¢—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç
                bg="#2e2e2e",  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ–Ω–æ–º (–¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã)
                anchor="w"
        )
        copyright_label.grid(row=12, column=0, columnspan=2, sticky="w", pady=(10, 0))

    def validate_float_input(self, value_if_allowed):
        """
        –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤–≤–æ–¥ —á–∏—Å–µ–ª, –∑–Ω–∞–∫–∞ –∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (., ,)
        """
        if value_if_allowed == "" or value_if_allowed in ["-", ".", ","]:
            return True
        try:
            value_if_allowed.replace(',', '.').replace('-', '').strip()
            float(value_if_allowed.replace(',', '.'))
            return True
        except ValueError:
            return False

    def update_offsets(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ float-–∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            x_val = self.printer_offset_x.get().strip()
            self._offset_x = float(x_val.replace(',', '.')) if x_val not in ('', '-', '.') else 0.0
        except:
            self._offset_x = 0.0

        try:
            y_val = self.printer_offset_y.get().strip()
            self._offset_y = float(y_val.replace(',', '.')) if y_val not in ('', '-', '.') else 0.0
        except:
            self._offset_y = 0.0

        try:
            w_val = self.line_width_var.get().strip()
            self._line_width = float(w_val.replace(',', '.')) if w_val not in ('', '-', '.') else 5.0
            if self._line_width <= 0:
                self._line_width = 0.1
        except:
            self._line_width = 5.0

    def browse_input(self):
        """–í—ã–±–æ—Ä Excel —Ñ–∞–π–ª–∞"""
        file = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ Excel", filetypes=[("Excel", "*.xlsx")])
        if file:
            self.input_file.set(file)
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(file)  # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
            file_time = datetime.fromtimestamp(
                    os.path.getmtime(file)
            ).strftime('%Y-%m-%d %H:%M:%S')  # –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è

            logging.info(f"üìÅ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø—É—Ç–∏: {file}")
            logging.info(f"üìä –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            logging.info(f"üïí –ò–∑–º–µ–Ω–µ–Ω: {file_time}")

    def browse_output(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É")
        if folder:
            self.output_dir.set(folder)
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            logger.info(f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏: {folder}")

    def generate(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
        input_path = self.input_file.get()
        output_dir = self.output_dir.get()

        if not input_path or not output_dir:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–∞–ø–∫—É!")
            logger.error(f"üö® –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n")
            return

        try:
            wb = openpyxl.load_workbook(input_path)
            ws = wb.active
            headers = [cell.value for cell in ws[1]]

            # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
            system_idx = find_column(headers, "system", "–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞", "–°–∏—Å—Ç–µ–º–∞")
            track_idx = find_column(headers, "track", "–¢—Ä–∞—Å—Å–∞", "–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")
            cable_idx = find_column(headers, "cable", "–ö–∞–±–µ–ª—å")
            length_idx = find_column(headers, "length", "–î–ª–∏–Ω–∞")
            quantity_idx = find_column(headers, "quantity", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–ª-–≤–æ")
            list_idx = [system_idx, track_idx, cable_idx, length_idx, quantity_idx]

            headers_not_none = [item for item in headers if item is not None]
            border = '-'
            border_headers_not_none = 0 + 28
            for header in headers_not_none:
                len_header = len(header)
                border_headers_not_none += len_header

            logging.info(
                f"üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª excel –∏–º–µ–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏:\n"
                f"{border * border_headers_not_none}\n"
                f"| {headers_not_none} |\n"
                f"{border * border_headers_not_none}\n"
                )

            if None in (system_idx, track_idx, cable_idx, length_idx, quantity_idx):
                if None in list_idx:
                    for i, idx in enumerate(list_idx):
                        if idx is None:
                            list_idx[i] = f"{i + 1} (–Ω–µ –Ω–∞–π–¥–µ–Ω)"
                        elif idx is not None:
                            list_idx[i] = f"{i + 1} ({headers[idx]})"
                messagebox.showerror(
                        "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã!"
                                  "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Excel —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n"
                                  f"\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:\n {list_idx}\n"
                                  f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
                )
                logging.error(f"üö® –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã!\n")

                return

            data = []
            for row in ws.iter_rows(min_row=2, values_only=True):
                system = str(row[system_idx] or "").strip()
                track = str(row[track_idx] or "").strip()
                cable = str(row[cable_idx] or "").strip()
                length_val = str(row[length_idx] or "").strip()
                try:
                    qty = int(row[quantity_idx])
                except:
                    qty = 1
                for _ in range(qty):
                    data.append(
                            {
                                    "system": system,
                                    "track": track,
                                    "cable": cable,
                                    "length": length_val
                            }
                    )

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            file_name = self.output_name.get().strip()
            if not file_name.endswith(".pdf"):
                file_name += ".pdf"

            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            raw_name = self.output_name.get().strip()
            if not raw_name:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞.")
                logger.error(f"üö® –û—à–∏–±–∫–∞: –ò–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ.")
                return

            clean_name = self.sanitize_filename(raw_name)
            logger.info(f"üìù –ó–∞–¥–∞–Ω–æ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {clean_name + '.pdf'}")

            if not clean_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                logging.error(f"üö® –û—à–∏–±–∫–∞: –ò–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
                return

            if not clean_name.endswith(".pdf"):
                clean_name += ".pdf"

            output_path = os.path.join(output_dir, clean_name)
            # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
            normalized_path = output_path.replace('\\', '/')
            logger.info(f"üìù –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª pdf —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {normalized_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
            try:
                with open(output_path, 'w'):
                    pass
                os.remove(output_path)  # —á–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª:\n{clean_name}\n\n{str(e)}")
                logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                return

            c = canvas.Canvas(output_path, pagesize=A4)
            c.setFont("Times-Bold", 12)

            index = 0
            total_sides = len(data) * 2
            self.progress["maximum"] = total_sides
            self.progress["value"] = 0

            while index < len(data):
                # –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                self.draw_page(c, data, index, side='front')
                c.showPage()
                self.progress["value"] += 1

                # –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                self.draw_page(c, data, index, side='back')
                if index + MAX_COLS * MAX_ROWS < len(data):
                    c.showPage()
                self.progress["value"] += 1

                index += MAX_COLS * MAX_ROWS

            c.save()
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{output_path}")
            logger.info(f"üìù –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª pdf —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {normalized_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"üö® –û—à–∏–±–∫–∞: {str(e)}")

    def draw_page(self, c, data, start_index, side):
        """
        –†–∏—Å—É–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏.
        :param c: –æ–±—ä–µ–∫—Ç canvas (PDF)
        :param data: —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        :param start_index: —Å –∫–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞—á–∏–Ω–∞—Ç—å
        :param side: 'front' –∏–ª–∏ 'back'
        """
        col_step = TRIANGLE_BASE / 2
        x_centers_original = [45 * mm, 75 * mm, 105 * mm, 135 * mm, 165 * mm]
        Y_START = 70 * mm # –ù–∞—á–∞–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Ä—è–¥–∞

        # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        shift_x = self._offset_x * mm if side == 'back' else 0
        shift_y = self._offset_y * mm if side == 'back' else 0

        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ–º X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        count = 0
        for i in range(start_index, min(start_index + MAX_COLS * MAX_ROWS, len(data))):
            item = data[i]
            col = count % MAX_COLS
            row = count // MAX_COLS

            if row >= MAX_ROWS:
                break

            # –ë–∞–∑–æ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X (–¥–ª—è –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
            center_x_base = x_centers_original[col]

            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –ª–∏—Å—Ç–∞
            if side == 'back':
                center_x = PAGE_WIDTH - center_x_base + shift_x
                # center_x = x_centers_original[col] + shift_x
            else:
                center_x = center_x_base + shift_x

            # y_base = Y_START + row * TRIANGLE_HEIGHT
            y_base = Y_START + row * TRIANGLE_HEIGHT
            is_upside_down = col % 2 == 1

            if side == 'front':
                main_text = item["system"]
                sub_text = item["track"]
                main_font = FONT_SYSTEM
                sub_font = FONT_TRACK
            else:
                main_text = item["cable"]
                raw_length = str(item["length"]).strip()
                sub_text = f"L={raw_length} –º" if raw_length.replace('.', '').isdigit() else raw_length
                main_font = FONT_CABLE
                sub_font = FONT_LENGTH

            self.draw_triangle(
                    c, center_x, y_base, is_upside_down, main_text, sub_text,
                    main_font, sub_font, side
            )

            count += 1

    def draw_triangle(self, c, center_x, y_base, upside_down, main_text, sub_text,
                      main_font_size, sub_font_size, side):
        """
        –†–∏—Å—É–µ—Ç –æ–¥–∏–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 60√ó55 –º–º –ø–æ –ì–û–°–¢.
        :param c: canvas
        :param center_x: X —Ü–µ–Ω—Ç—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
        :param y_base: Y –æ—Å–Ω–æ–≤–∞–Ω–∏—è
        :param upside_down: True –µ—Å–ª–∏ –æ—Å—Ç—Ä–∏—ë–º –≤–Ω–∏–∑
        :param main_text: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        :param sub_text: –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        :param main_font_size: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        :param sub_font_size: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        :param side: 'front' –∏–ª–∏ 'back'
        """
        base = TRIANGLE_BASE
        height = TRIANGLE_HEIGHT
        x_left = center_x - base / 2
        x_right = center_x + base / 2

        # –í–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–ø–æ –ì–û–°–¢: –æ—Å–Ω–æ–≤–∞–Ω–∏–µ 60 –º–º, –≤—ã—Å–æ—Ç–∞ 55 –º–º)
        if upside_down:
            points = [(x_left, y_base), (x_right, y_base), (center_x, y_base - height)]
        else:
            points = [(x_left, y_base - height), (x_right, y_base - height), (center_x, y_base)]

        # –ö–æ–Ω—Ç—É—Ä
        c.setLineWidth(self._line_width)
        c.setStrokeColorRGB(0, 0, 0)
        c.lines([
            (points[0][0], points[0][1], points[1][0], points[1][1]),
            (points[1][0], points[1][1], points[2][0], points[2][1]),
            (points[2][0], points[2][1], points[0][0], points[0][1])
        ])

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–≤ –¥–æ–ª—è—Ö –æ—Ç –≤—ã—Å–æ—Ç—ã)
        dy_main = height * 0.38  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç ‚Äî —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞
        dy_sub = height * 0.1   # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî —É –æ—Å–Ω–æ–≤–∞–Ω–∏—è

        c.saveState()

        if upside_down:
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–æ–∫—Ä—É–≥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è
            c.translate(center_x, y_base)
            c.rotate(180)
            c.translate(-center_x, -y_base)
            y_main = y_base + dy_main
            y_sub = y_base + dy_sub
        else:
            base_y = y_base - height
            y_main = base_y + dy_main
            y_sub = base_y + dy_sub

        # --- –û–°–ù–û–í–ù–û–ô –¢–ï–ö–°–¢ ---
        if side == 'back':  # –≠—Ç–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚Äî cable
            parts = split_cable_text(main_text)
            line1, line2 = parts[0], parts[1]

            # –®—Ä–∏—Ñ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞ FONT_CABLE (16)
            fs_line1 = FONT_CABLE

            # –®—Ä–∏—Ñ—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞—è
            if len(line2) >= 15:
                fs_line2 = 12
            elif len(line2) >= 10:
                fs_line2 = 14
            else:
                fs_line2 = FONT_CABLE  # 16

            # –ü–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–æ–∫: –ø–µ—Ä–≤–∞—è ‚Äî —á—É—Ç—å –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞, –≤—Ç–æ—Ä–∞—è ‚Äî —á—É—Ç—å –Ω–∏–∂–µ
            y_upper = y_main - fs_line1 * 0.5  # –≤—ã—à–µ
            y_lower = y_main + fs_line2 * 0.5  # –Ω–∏–∂–µ
            y_positions = [y_lower, y_upper]  # ‚ö†Ô∏è –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –≤–µ—Ä—Ö–Ω—è—è, –ø–æ—Ç–æ–º –Ω–∏–∂–Ω—è—è

            # –†–∏—Å—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            c.setFont("Times-Bold", fs_line1)
            try:
                tw1 = pdfmetrics.stringWidth(line1, "Times-Bold", fs_line1)
            except:
                tw1 = len(line1) * fs_line1 * 0.6
            x_pos1 = center_x - tw1 / 2
            c.drawString(x_pos1, y_positions[0], line1)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –≤—ã—à–µ

            # –†–∏—Å—É–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É
            c.setFont("Times-Bold", fs_line2)
            try:
                tw2 = pdfmetrics.stringWidth(line2, "Times-Bold", fs_line2)
            except:
                tw2 = len(line2) * fs_line2 * 0.6
            x_pos2 = center_x - tw2 / 2
            c.drawString(x_pos2, y_positions[1], line2)  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–∏–∂–µ

        else:  # –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚Äî system
            lines = [main_text]

            # –ü–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Ç 22 –¥–æ 16 pt –ø—Ä–∏ —Ä–æ—Å—Ç–µ –¥–ª–∏–Ω—ã
            length = len(main_text)
            fs = max(16, 32 - length * 2) if length >= 5 else FONT_SYSTEM


            if fs < MIN_FONT_SIZE:
                fs = MIN_FONT_SIZE

            y_positions = [y_main]

            c.setFont("Times-Bold", fs)
            for j, line in enumerate(lines):
                try:
                    tw = pdfmetrics.stringWidth(line, "Times-Bold", fs)
                except:
                    tw = len(line) * fs * 0.6
                x_pos = center_x - tw / 2
                y_pos = y_positions[j]
                c.drawString(x_pos, y_pos, line)

        # --- –ü–û–î–ó–ê–ì–û–õ–û–í–û–ö (track –∏–ª–∏ length) ---
        base_font_size = sub_font_size  # 14 pt
        line_spacing = base_font_size * 1.1

        if side == 'front':
            try:
                full_width = pdfmetrics.stringWidth(sub_text, "Times-Bold", base_font_size)
                max_width = TRIANGLE_BASE * 0.9
                fits_in_one_line = full_width <= max_width
            except:
                fits_in_one_line = len(sub_text) <= 30

            if not fits_in_one_line and '/' in sub_text:
                parts = sub_text.split('/', 1)
                line1 = parts[0] + '/'
                line2 = parts[1].strip()
                lines = [line1, line2]

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å—Ä–µ–¥–∏ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π

                max_str = max(parts[0], parts[1])
                max_ind = parts.index(max_str)
                max_len = max(len(parts[0]), len(parts[1]))               


                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å—Ä–µ–¥–∏ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π
                len1, len2 = len(parts[0]), len(parts[1])
                max_len = max(len1, len2)
                max_ind = 0 if len1 >= len2 else 1

                # –ü–ª–∞–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –û–ë–ï–ò–• —Å—Ç—Ä–æ–∫
                if max_len < 15:
                    track_font_size = 14.0
                elif max_len == 15:
                    track_font_size = 13.0
                elif max_ind == 1 and max_len >= 18:
                    track_font_size = 10.0  # –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –¥–ª–∏–Ω–Ω–∞—è ‚Äî —Å–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
                elif max_ind == 0 and max_len >= 18:
                    track_font_size = 12.0  # –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–ª–∏–Ω–Ω–∞—è ‚Äî —É–º–µ—Ä–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
                elif max_ind == 0:
                    track_font_size = max(11.0, 14.0 - (max_len - 15) * 1.2)
                else:  # max_ind == 1 –∏ max_len < 18
                    track_font_size = max(10.0, 14.0 - (max_len - 15) * 0.5)

            else:
                lines = [sub_text]
                track_font_size = base_font_size  # 14 pt

        else:
            lines = [sub_text]
            track_font_size = base_font_size

        lines = lines[:2]

        # –ë–∞–∑–æ–≤–∞—è Y: –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        y_single = y_sub + height * 0.05

        if len(lines) == 2:
            y_pos_1 = y_single - line_spacing
            y_pos_2 = y_single
            y_positions = [y_pos_2, y_pos_1]  # –ø–µ—Ä–≤–∞—è –≤—ã—à–µ, –≤—Ç–æ—Ä–∞—è –Ω–∏–∂–µ
        else:
            y_positions = [y_single]

        # –†–∏—Å—É–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –æ–¥–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º
        c.setFont("Times-Bold", track_font_size)

        for j, line in enumerate(lines):
            if not line.strip():
                continue
            try:
                tw = pdfmetrics.stringWidth(line, "Times-Bold", track_font_size)
            except:
                estimated_width_per_char = {
                    '–®': 1.2, '–©': 1.2, '–ñ': 1.15, '–î': 1.1, '–ü': 1.05,
                    '–ê': 0.9, '–í': 0.95, '–ï': 0.9, '–ö': 0.95, '–•': 0.9
                }
                total_width = sum(estimated_width_per_char.get(c.upper(), 1.0) for c in line)
                tw = total_width * track_font_size * 0.58

            x_pos = center_x - tw / 2
            y_pos = y_positions[j]
            c.drawString(x_pos, y_pos, line)

        c.restoreState()


if __name__ == "__main__":
    root = tk.Tk()
    app = CableLabelApp(root)
    root.mainloop()